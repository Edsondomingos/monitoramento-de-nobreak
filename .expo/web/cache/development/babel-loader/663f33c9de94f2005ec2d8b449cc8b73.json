{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Paho from \"paho-mqtt\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar topico;\nvar mensagem;\nvar redeValue;\nvar client = new Paho.Client('broker.emqx.io', 8083, '/');\nclient.connect({\n  onSuccess: function onSuccess() {\n    console.log(\"Tensão bateria conectada\");\n    client.subscribe(\"nobreak\");\n    var message1 = new Paho.Message(\"12.5\");\n    message1.destinationName = \"nobreak\";\n    client.send(message1);\n  },\n  onFailure: function onFailure() {\n    console.log(\"Falhou\");\n  }\n});\nvar clientRede = new Paho.Client('broker.emqx.io', 8083, '/');\nclientRede.connect({\n  onSuccess: function onSuccess() {\n    console.log(\"Rede Conectada\");\n    clientRede.subscribe(\"rede\");\n    var message2 = new Paho.Message(\"0\");\n    message2.destinationName = \"rede\";\n    clientRede.send(message2);\n  },\n  onFailure: function onFailure() {\n    console.log(\"Falhou\");\n  }\n});\nvar clientLiga = new Paho.Client('broker.emqx.io', 8083, '/');\nclientLiga.connect({\n  onSuccess: function onSuccess() {\n    console.log(\"Liga Conectada\");\n    clientLiga.subscribe(\"liga\");\n    var message2 = new Paho.Message(\"on\");\n    message2.destinationName = \"liga\";\n    clientRede.send(message2);\n  },\n  onFailure: function onFailure() {\n    console.log(\"Falhou\");\n  }\n});\nexport function onoff() {\n  clientLiga.subscribe(\"liga\");\n  var rele = new Paho.Message(\"on\");\n  rele.destinationName = \"liga\";\n  client.send(rele);\n}\n\nvar porcentagem = function porcentagem(msg) {\n  var valor = parseFloat(msg);\n\n  if (valor >= 11.7 && valor <= 12.7) {\n    var resultado = parseInt((1 - (12.7 - valor)) * 100);\n    return resultado + '%';\n  } else if (valor < 11.7) {\n    return 'Descarregada';\n  }\n};\n\nexport function App() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      msg = _useState2[0],\n      setMsg = _useState2[1];\n\n  client.onMessageArrived = function (message) {\n    console.log('Topic: ' + message.destinationName + \", Message: \" + message.payloadString);\n    topico = message.destinationName;\n    mensagem = message.payloadString;\n    setMsg(mensagem);\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Text, {\n      children: [mensagem, \"v\"]\n    }), _jsx(Text, {\n      children: porcentagem(mensagem)\n    })]\n  });\n}\nexport function Red() {\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rede = _useState4[0],\n      setRede = _useState4[1];\n\n  clientRede.onMessageArrived = function (message) {\n    console.log('Topic: ' + message.destinationName + \", Message: \" + message.payloadString);\n    topico = message.destinationName;\n    redeValue = message.payloadString;\n    setRede(redeValue);\n  };\n\n  return _jsx(View, {\n    children: _jsx(Text, {\n      children: rede == 1 ? 'Conectado a Tomada' : 'Fora da tomada'\n    })\n  });\n}","map":{"version":3,"names":["React","useState","Paho","topico","mensagem","redeValue","client","Client","connect","onSuccess","console","log","subscribe","message1","Message","destinationName","send","onFailure","clientRede","message2","clientLiga","onoff","rele","porcentagem","msg","valor","parseFloat","resultado","parseInt","App","setMsg","onMessageArrived","message","payloadString","Red","rede","setRede"],"sources":["C:/testes/monitoramento-de-nobreak/src/components/TesteMQTT.js"],"sourcesContent":["import * as React from 'react'\nimport { useState } from \"react\"\nimport { View, Text} from \"react-native\"\nimport Paho from \"paho-mqtt\"\n\nvar topico;\nvar mensagem;\nvar redeValue\n\n// const ssid = \"wIFRN-IoT\";\n// const  password = \"deviceiotifrn\";\n// const mqtt_broker = \"10.44.1.35\";\n\n// const mqtt_username = \"emqx\";\n// const mqtt_password = \"public\";\n// const mqtt_port = 1883;\n\nconst client = new Paho.Client(\n    'broker.emqx.io',\n    8083,\n    '/'\n    )\n\n// const client = new Paho.Client(\n//     '10.44.1.35',\n//     9001,\n//     '/'\n// )\n\nclient.connect({\n    onSuccess: function () {\n        console.log(\"Tensão bateria conectada\")\n        client.subscribe(\"nobreak\")\n        const message1 = new Paho.Message(\"12.5\")\n        message1.destinationName = \"nobreak\"\n        client.send(message1)\n    },\n    onFailure: function () {\n        console.log(\"Falhou\")\n    },\n})\n\nconst clientRede = new Paho.Client(\n    'broker.emqx.io',\n    8083,\n    '/'\n)\n\nclientRede.connect({\n    onSuccess: function () {\n        console.log(\"Rede Conectada\")\n        clientRede.subscribe(\"rede\")\n        const message2 = new Paho.Message(\"0\")\n        message2.destinationName = \"rede\"\n        clientRede.send(message2)\n    },\n    onFailure: function () {\n        console.log(\"Falhou\")\n    },\n})\n\nconst clientLiga = new Paho.Client(\n    'broker.emqx.io',\n    8083,\n    '/'\n)\n\nclientLiga.connect({\n    onSuccess: function () {\n        console.log(\"Liga Conectada\")\n        clientLiga.subscribe(\"liga\")\n        const message2 = new Paho.Message(\"on\")\n        message2.destinationName = \"liga\"\n        clientRede.send(message2)\n    },\n    onFailure: function () {\n        console.log(\"Falhou\")\n    },\n})\n\n    \n\nexport function onoff(){\n    clientLiga.subscribe(\"liga\")\n    const rele = new Paho.Message(\"on\")\n    rele.destinationName = \"liga\"\n    client.send(rele)\n\n}\n\nconst porcentagem = (msg) => {    \n    let valor = parseFloat(msg)\n    if(valor >= 11.7 && valor <= 12.7){\n        let resultado = parseInt((1 - (12.7 - valor)) * 100)\n        return resultado + '%'\n    } else if (valor < 11.7){\n        return 'Descarregada'\n    }\n}\n\nexport function App() {\n\n    const [msg, setMsg] = useState('')\n\n    client.onMessageArrived = function (message) {\n        console.log('Topic: ' + message.destinationName + \", Message: \" + message.payloadString)\n        topico = message.destinationName\n        // if (topico == 'nobreak'){\n            mensagem = message.payloadString;\n            setMsg(mensagem)\n        // }\n    }     \n    \n    return (\n        <View>\n            <Text>{mensagem}v</Text>\n            <Text>{porcentagem(mensagem)}</Text>\n        </View>\n        \n    )\n}\n\nexport function Red(){\n\n    const [rede, setRede] = useState()\n\n    clientRede.onMessageArrived = function (message) {\n        console.log('Topic: ' + message.destinationName + \", Message: \" + message.payloadString);\n        topico = message.destinationName\n        // if (topico == 'rede'){\n            redeValue = message.payloadString;\n            setRede(redeValue)\n        // }\n    }  \n    \n    return (\n        <View>\n            <Text>\n                {rede == 1 ? 'Conectado a Tomada':'Fora da tomada'}                \n            </Text>\n        </View>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}