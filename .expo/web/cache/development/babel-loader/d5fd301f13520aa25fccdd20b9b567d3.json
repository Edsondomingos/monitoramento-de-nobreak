{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Paho from \"paho-mqtt\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar topico;\nvar mensagem;\nvar redeValue;\nvar client = new Paho.Client('broker.emqx.io', 8083, '/');\nclient.connect({\n  onSuccess: function onSuccess() {\n    console.log(\"conectado\");\n    client.subscribe(\"nobreak\");\n    var message1 = new Paho.Message(\"12.5\");\n    message1.destinationName = \"nobreak\";\n    client.send(message1);\n    client.subscribe(\"rede\");\n    var message2 = new Paho.Message(\"0\");\n    message2.destinationName = \"rede\";\n    client.send(message2);\n  },\n  onFailure: function onFailure() {\n    console.log(\"Falhou\");\n  }\n});\n\nvar porcentagem = function porcentagem(msg) {\n  var valor = parseFloat(msg);\n\n  if (valor >= 11.7 && valor <= 12.7) {\n    var resultado = parseInt((1 - (12.7 - valor)) * 100);\n    return resultado + '%';\n  } else if (valor < 11.7) {\n    return 'Descarregada';\n  }\n};\n\nexport function App() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      msg = _useState2[0],\n      setMsg = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rede = _useState4[0],\n      setRede = _useState4[1];\n\n  client.onMessageArrived = function (message) {\n    console.log('Topic: ' + message.destinationName + \", Message: \" + message.payloadString);\n\n    if (message.destinationName == 'nobreak') {\n      setMsg(message.payloadString);\n    }\n\n    if (message.destinationName == 'rede') {\n      setRede(message.payloadString);\n      redeValue = message.payloadString;\n    }\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Text, {\n      children: [msg, \"v\"]\n    }), _jsx(Text, {\n      children: porcentagem(msg)\n    }), _jsx(Text, {\n      children: rede\n    })]\n  });\n}\nexport function Red(valor) {\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      rede = _useState6[0],\n      setRede = _useState6[1];\n\n  return _jsx(View, {\n    children: _jsxs(Text, {\n      children: [valor == '1' ? 'Conectado a Tomada' : 'Fora da tomada', typeof rede, typeof redeValue]\n    })\n  });\n}","map":{"version":3,"names":["React","useState","Paho","topico","mensagem","redeValue","client","Client","connect","onSuccess","console","log","subscribe","message1","Message","destinationName","send","message2","onFailure","porcentagem","msg","valor","parseFloat","resultado","parseInt","App","setMsg","rede","setRede","onMessageArrived","message","payloadString","Red"],"sources":["C:/testes/monitoramento-de-nobreak/src/components/TesteMQTT.js"],"sourcesContent":["import * as React from 'react'\nimport { useState } from \"react\"\nimport { View, Text} from \"react-native\"\nimport Paho from \"paho-mqtt\"\n\nvar topico;\nvar mensagem;\nvar redeValue\n\n// const ssid = \"wIFRN-IoT\";\n// const  password = \"deviceiotifrn\";\n// const mqtt_broker = \"10.44.1.35\";\n\n// const mqtt_username = \"emqx\";\n// const mqtt_password = \"public\";\n// const mqtt_port = 1883;\n\nconst client = new Paho.Client(\n    'broker.emqx.io',\n    8083,\n    '/'\n)\n\n// const client = new Paho.Client(\n//     '10.44.1.35',\n//     9001,\n//     '/'\n// )\n\nclient.connect({\n    onSuccess: function () {\n        console.log(\"conectado\")\n        client.subscribe(\"nobreak\")\n        // client.subscribe(\"rede\")\n        const message1 = new Paho.Message(\"12.5\")\n        message1.destinationName = \"nobreak\"\n        client.send(message1)\n\n        client.subscribe(\"rede\")\n        const message2 = new Paho.Message(\"0\")\n        message2.destinationName = \"rede\"\n        client.send(message2)\n    },\n    onFailure: function () {\n        console.log(\"Falhou\")\n    },\n})\n\n// const clientRede = new Paho.Client(\n//     'broker.emqx.io',\n//     8083,\n//     '/'\n// )\n\n// clientRede.connect({\n//     onSuccess: function () {\n//         console.log(\"Rede Conectada\")\n//         clientRede.subscribe(\"rede\")\n//         const message2 = new Paho.Message(\"0\")\n//         message2.destinationName = \"rede\"\n//         clientRede.send(message2)\n        \n//     },\n//     onFailure: function () {\n//         console.log(\"Falhou\")\n//     },\n// })\n\n// const clientLiga = new Paho.Client(\n//     'broker.emqx.io',\n//     8083,\n//     '/'\n// )\n\n// clientLiga.connect({\n//     onSuccess: function () {\n//         console.log(\"Liga Conectada\")\n//         clientLiga.subscribe(\"liga\")\n//         const message3 = new Paho.Message(\"on\")\n//         message3.destinationName = \"liga\"\n//         clientRede.send(message3)\n//     },\n//     onFailure: function () {\n//         console.log(\"Falhou\")\n//     },\n// })\n\n    \n\n// export function onoff(){\n//     clientLiga.subscribe(\"liga\")\n//     const rele = new Paho.Message(\"on\")\n//     rele.destinationName = \"liga\"\n//     client.send(rele)\n\n// }\n\nconst porcentagem = (msg) => {    \n    let valor = parseFloat(msg)\n    if(valor >= 11.7 && valor <= 12.7){\n        let resultado = parseInt((1 - (12.7 - valor)) * 100)\n        return resultado + '%'\n    } else if (valor < 11.7){\n        return 'Descarregada'\n    }\n}\n\n// console.log(client.onMessageArrived =  (message) => message)\nexport function App() {\n    \n    const [msg, setMsg] = useState('')\n    const [rede, setRede] = useState('')\n\n    client.onMessageArrived = function (message) {\n        console.log('Topic: ' + message.destinationName + \", Message: \" + message.payloadString)\n        // topico = \n        \n        if (message.destinationName == 'nobreak'){\n            // mensagem = message.payloadString;\n            setMsg(message.payloadString)\n        }\n        if (message.destinationName == 'rede'){\n            // redeValue = message.payloadString;\n            setRede(message.payloadString)\n            // Red(message.payloadString)\n            redeValue = message.payloadString\n        }\n    }     \n    \n    return (\n        <View>\n            <Text>{msg}v</Text>\n            <Text>{porcentagem(msg)}</Text>\n            <Text>{rede}</Text>\n        </View>\n        \n    )\n}\n\nexport function Red(valor){\n\n    const [rede, setRede] = useState('')\n\n    // clientRede.onMessageArrived = function (message) {\n    //     console.log('Topic: ' + message.destinationName + \", Message: \" + message.payloadString);\n    //     topico = message.destinationName\n        // if (topico == 'rede'){\n        //     redeValue = message.payloadString;\n        //     setRede(redeValue)\n        //     console.log('Red')\n        // }\n    // }  \n    // console.log('Red')\n    return (\n        <View>\n            <Text>\n                {valor == '1' ? 'Conectado a Tomada':'Fora da tomada'}                \n                {typeof rede}\n                {typeof redeValue}\n            </Text>\n        </View>\n    )\n}\n \n"],"mappings":"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"},"metadata":{},"sourceType":"module"}